include "helpers.saw";

let buffer_type (len : Int) : LLVMType = 
  llvm_type (str_concat "{i64, [" (str_concat (show len) "x i8]}"));

let buffer_alloc_spec (len : Int) : CrucibleSetup () = do {
  let lenval = {{ `(len) : [64] }};
  
  llvm_execute_func [llvm_term lenval];
  
  buf   <- llvm_alloc (buffer_type len);
  llvm_points_to(llvm_elem buf 0) (llvm_term lenval);
  llvm_return buf;
};

let buffer_create_spec (len : Int) = do {
  let lenval = {{`(len) : [64]}};
  (data, datap) <- ptr_to_fresh "data" (llvm_array len i8);

  llvm_execute_func [datap, llvm_term lenval];
  
  buf   <- llvm_alloc (buffer_type len);
  llvm_points_to buf (llvm_struct_value [llvm_term lenval, llvm_term data]);
  llvm_return buf;
};

let buffer_copy_spec (len : Int) = do {

  let lenval = {{`(len) : [64]}};
  data  <- crucible_fresh_var "data" (llvm_array len i8);
  buffer   <- llvm_alloc (buffer_type len);
  llvm_points_to buffer (llvm_struct_value [llvm_term lenval, llvm_term data]);

  llvm_execute_func[buffer];

  newbuf <- llvm_alloc (buffer_type len); 
  llvm_points_to newbuf (llvm_struct_value [llvm_term lenval, llvm_term data]); //llvm_points_to_untyped buffer (llvm_struct_value[llvm_term lenval, llvm_term data]); 
  llvm_return newbuf;
};

//This can be reused for signal_buffer_copy
let buffer_copy_n_spec (len : Int) (n: Int) = do {
  let lenval = {{`(len) : [64]}};
  data  <- crucible_fresh_var "data" (llvm_array len i8);
  buffer   <- llvm_alloc (buffer_type len);
  llvm_points_to buffer (llvm_struct_value [llvm_term lenval, llvm_term data]);

  llvm_execute_func[buffer, llvm_term {{`(n) : [64]}}];
  
   
  let newlenval = {{(min `(len) `(n)):[64]}};
  let newlen = eval_int newlenval;

  newbuf <- llvm_alloc (buffer_type newlen);
  llvm_points_to newbuf (llvm_struct_value [llvm_term newlenval, llvm_term {{take`{newlen} data}}]); //llvm_points_to_untyped buffer (llvm_struct_value[llvm_term lenval, llvm_term data]); 
  llvm_return newbuf;
  };

m <- llvm_load_module "libsignal-protocol-c/build/src/libsignal-protocol-c.a.bc";

let print_tactic = do {
  //simplify (cryptol_ss ());
  print_goal;
  abc;
};

buffer_alloc_ov <- llvm_verify m "signal_buffer_alloc" [] false (buffer_alloc_spec 64) abc;
buffer_create_ov <-llvm_verify m "signal_buffer_create" [] false (buffer_create_spec 64) abc;
buffer_copy_ov <-llvm_verify m "signal_buffer_copy" [] false (buffer_copy_spec 64) print_tactic;
buffer_copy_n_ov <- llvm_verify m "signal_buffer_n_copy" [] false (buffer_copy_n_spec 64 32) print_tactic; //this only works if the second is a multiple of 8, it seems. Must be an alignment problem