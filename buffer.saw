include "helpers.saw";

let buffer_type_string (len : Int) : LLVMType = 
  llvm_type (str_concat "{i64, [" (str_concat (show len) "x i8]}"));

let buffer_type (len : Int) : LLVMType = (llvm_array (eval_size {| 8 + len|}) i8);
let alloc_buffer_aligned (len : Int) = llvm_alloc_aligned 16 (buffer_type len);
let alloc_buffer_aligned_readonly (len: Int ) = llvm_alloc_readonly_aligned 16 (buffer_type len);
let alloc_pointsto_buffer (len : Int) (data : Term) = do {
  buf <- alloc_buffer_aligned len;
  llvm_points_to_untyped buf (llvm_struct_value [llvm_term {{`(len) : [64]}}, llvm_term data]);
  return buf;
};
let alloc_pointsto_buffer_readonly (len : Int) (data : Term) = do {
  buf <- alloc_buffer_aligned_readonly len;
  llvm_points_to_untyped buf (llvm_struct_value [llvm_term {{`(len) : [64]}}, llvm_term data]);
  return buf;
};

let buffer_alloc_spec (len : Int) : CrucibleSetup () = do {
  let lenval = {{ `(len) : [64] }};
  
  llvm_execute_func [llvm_term lenval];
  
  buf   <- alloc_buffer_aligned len;
  llvm_points_to_at_type (llvm_elem buf 0) i64 (llvm_term lenval);
  llvm_return buf;
};

let buffer_create_spec (len : Int) = do {
  let lenval = {{`(len) : [64]}};
  (data, datap) <- ptr_to_fresh "data" (llvm_array len i8);

  llvm_execute_func [datap, llvm_term lenval];
  
  buf <- alloc_pointsto_buffer len data;
  llvm_return buf;
};

let buffer_copy_spec (len : Int) = do {

  let lenval = {{`(len) : [64]}};
  data  <- crucible_fresh_var "data" (llvm_array len i8);
  buffer <- alloc_pointsto_buffer_readonly len data;

  llvm_execute_func[buffer];

  newbuf <- alloc_pointsto_buffer len data;
  llvm_return newbuf;
};

//This can be reused for signal_buffer_copy
let buffer_copy_n_spec (len : Int) (n: Int) = do {
  let lenval = {{`(len) : [64]}};
  data  <- crucible_fresh_var "data" (llvm_array len i8);
  buffer <- alloc_pointsto_buffer_readonly len data;

  llvm_execute_func[buffer, llvm_term {{`(n) : [64]}}];
  
   
  let newlenval = {{(min `(len) `(n)):[64]}};
  let newlen = eval_int newlenval;

  newbuf <- alloc_pointsto_buffer newlen {{take`{newlen} data}};
  llvm_return newbuf;
  };

m <- llvm_load_module "libsignal-protocol-c/build/src/libsignal-protocol-c.a.bc";

let print_tactic = do {
  //simplify (cryptol_ss ());
  print_goal;
  abc;
};

buffer_alloc_ov <- llvm_verify m "signal_buffer_alloc" [] false (buffer_alloc_spec 64) abc;
buffer_create_ov <-llvm_verify m "signal_buffer_create" [] false (buffer_create_spec 64) abc;
buffer_copy_ov <-llvm_verify m "signal_buffer_copy" [] false (buffer_copy_spec 63) abc;
buffer_copy_n_ov <- llvm_verify m "signal_buffer_n_copy" [] false (buffer_copy_n_spec 64 31) abc;